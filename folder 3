// union and intersection
#include <bits/stdc++.h>
using namespace std;
void Union(int arr1[], int arr2[], int m, int n)
{
    int i = 0, j = 0;
    while (i < m && j < n) {
        if (arr1[i] < arr2[j])
            cout << arr1[i++] << " ";
        else if (arr2[j] < arr1[i])
            cout << arr2[j++] << " ";
 
        else {
            cout << arr2[j++] << " ";
            i++;
        }
    }
    while (i < m)
        cout << arr1[i++] << " ";
 
    while (j < n)
        cout << arr2[j++] << " ";
}
void Intersection(int arr3[],int arr4[],int a,int b)
{
    int i=0,j=0;
    while (i < a && j < b) {
        if (arr3[i] < arr4[j])
            i++;
        else if (arr4[j] < arr3[i])
            j++;
        else
        {
            cout<<"\n";
            cout<<"Intersection:"<< arr3[j] << " ";
            i++;
            j++;
        }
    }
}
int main()
{
    int arr1[10],arr2[10],m,n,i;
    cin>>m;
    for(i=0;i<m;i++)
    {
        cin>>arr1[i];
    }
    cin>>n;
    for(i=0;i<n;i++)
    {
        cin>>arr2[i];
    }
    Union(arr1,arr2,m,n);
    Intersection(arr1,arr2,m,n);
    return 0;
}



// array rotation
#include <bits/stdc++.h>
using namespace std;
void leftRotatebyOne(int arr[], int n)
{
    int temp = arr[0], i;
    for (i = 0; i < n - 1; i++)
        arr[i] = arr[i + 1];
 
    arr[n-1] = temp;
}
void leftRotate(int arr[], int d, int n)
{
    for (int i = 0; i < d; i++)
        leftRotatebyOne(arr, n);
}

int main()
{
    int arr[10],n,d,i;
    cin>>n;
    for(i=0;i<n;i++)
    {
        cin>>arr[i];
    }
    cin>>d;
    leftRotate(arr, d, n);
    for (int i = 0; i < n; i++)
        cout << arr[i] << " ";
    return 0;
}
